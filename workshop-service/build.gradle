plugins {
    id "org.jetbrains.kotlin.jvm" version "1.6.21"
    id "org.jetbrains.kotlin.plugin.spring" version "1.6.21"
    id "org.springframework.boot" version "2.7.0"
    id "org.openapi.generator" version "6.0.0"
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.mockk:mockk"
}

test {
    useJUnitPlatform()
}

// ############### here starts the api-generation-configuration ##################################

openApiGenerate {
    inputSpec = project(":workshop-api").file('openapi.yaml').canonicalPath
    generatorName = "spring"
    outputDir = file("/target/generated-server/").canonicalPath
    apiPackage = "io.cloudflight.workshop.api"
    modelPackage = "io.cloudflight.workshop.api.model"

    additionalProperties = [
            "useTags"              : true, // use tags as prefix for generated apis
            "documentationProvider": "none", // do not include swagger-metadata annotations
            "gradleBuildFile"      : false,
            "exceptionHandler"     : false,
            "delegatePattern"      : true,
            "useBeanValidation"    : false,
            "openApiNullable"      : false
    ]
}

task cleanTarget(type: Delete) {
    delete "target"
}

// delete target-folder before regenerating to prevent error-prone file-merging
tasks.findByName("clean").dependsOn(cleanTarget)
tasks.findByName("openApiGenerate").dependsOn(cleanTarget)

sourceSets {
    main {
        java.srcDir("$projectDir/target/generated-server/src/main/java")
    }
}

tasks.findByName("compileKotlin").dependsOn(tasks.findByName("openApiGenerate"))
// ############### here ends the api-generation-configuration ###################################
